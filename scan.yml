---
- name: playbook - scan
  hosts: all
  become: yes
  tasks:
    - name: yum install epel-release
      yum:
        name: epel-release
        state: present

    # - name: yum update
    #   yum:
    #     name: '*'
    #     state: latest
    #     update_only: yes

    - name: wget https://get.docker.com/
      get_url:
        url: https://get.docker.com/
        dest: /root/docker.sh
        mode: 0511

    - name: ./docker.sh
      command: /root/docker.sh

    - name: service docker start
      command: service docker start

    - name: chkconfig docker on
      command: chkconfig docker on

    - name: yum python-pip
      yum:
        name: python-pip
        state: present

    - name: pip install 'docker-py'
      pip:
        name: docker-py
        executable: pip2
        state: present

    - name: docker pull elasticsearch:6.4.0
      docker_image:
        name: elasticsearch:6.4.0
        pull: yes

    - name: docker run es
      docker_container:
        name: es
        image: elasticsearch:6.4.0
        state: started
        restart: yes
        restart_policy: always
        ports:
          - "9200:9200"
        env:
          http.host: "0.0.0.0"
          transport.host: "127.0.0.1"
          bootstrap.memory_lock: "true"
          ES_JAVA_OPTS: "-Xms1g -Xmx1g"

    - name: copy esindexer.img
      copy:
        src: ./esindexer.img
        dest: /root/esindexer.img
        owner: root
        group: root
        mode: 0400

    - name: docker load esindexer.img
      docker_image:
        name: esindexer
        tag: latest
        load_path: /root/esindexer.img

    - name: docker run esindexer
      docker_container:
        name: esindexer
        image: aergo/esindexer
        state: started
        restart: yes
        restart_policy: always
        command: esindexer -A {{ node_address }}:7845 -E {{ ansible_ssh_host }}:9200 --prefix chain_

    - name: copy scan_backend.img
      copy:
        src: ./scan_backend.img
        dest: /root/scan_backend.img
        owner: root
        group: root
        mode: 0400

    - name: copy scan_frontend.img
      copy:
        src: ./scan_frontend.img
        dest: /root/scan_frontend.img
        owner: root
        group: root
        mode: 0400

    - name: docker load scan_backend.img
      docker_image:
        name: scan_backend
        tag: latest
        load_path: /root/scan_backend.img
        timeout: 3600

    - name: docker load scan_frontend.img
      docker_image:
        name: scan_frontend
        tag: latest
        load_path: /root/scan_frontend.img
        timeout: 3600

    - name: copy nginx.conf
      copy:
        dest: /root/localhost.conf
        content: |
          map $http_upgrade $connection_upgrade {
              default upgrade;
              ''      close;
          }

          server {
              listen 80 default_server;
              server_name www.scan.com;

              charset utf-8;

              location /aergo/ {
                  proxy_pass http://{{ node_address }}:7845;
                  proxy_http_version 1.1;
                  proxy_set_header Upgrade $http_upgrade;
                  proxy_set_header Connection $connection_upgrade;
              }

              location /chain/ {
                  proxy_pass http://{{ ansible_ssh_host }}:3000;

                  add_header 'Access-Control-Allow-Origin' "$http_origin"; # ignore CORS on localhost
                  add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS';
                  add_header 'Access-Control-Allow-Headers' 'DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range';
                  add_header 'Access-Control-Expose-Headers' 'Content-Length,Content-Range';
                  add_header 'Access-Control-Allow-Credentials' 'true';
                  if ($request_method = 'OPTIONS') {
                      add_header 'Access-Control-Max-Age' 1728000;
                      add_header 'Content-Type' 'text/plain; charset=utf-8';
                      add_header 'Content-Length' 0;
                      return 204;
                  }
              }

              root /var/www/;
              index index.html;

              location / {
                  try_files $uri /index.html;
              }
          }

    - name: docker run aergo_backend
      docker_container:
        name: aergo_backend
        image: aergo_backend:latest
        state: started
        restart: yes
        restart_policy: always
        ports:
          - "3000:3000"
        env:
          HOST: "http://{{ node_address }}:3000"
          ES_HOST: "{{ ansible_ssh_host }}:9200"

    - name: docker run aergo_frontend
      docker_container:
        name: aergo_frontend
        image: aergo_frontend:latest
        state: started
        restart: yes
        restart_policy: always
        ports:
          - "8080:80"
        volumes:
          - "/root:/etc/nginx/conf.d/:z"

    - name: replace localhost -> ip
      command: docker exec -it aergo_frontend sed -i 's/window.location.hostname/"{{ node_address }}"/' /var/www/main.60313c5a8cc068feb22d.js
